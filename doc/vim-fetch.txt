*vim-fetch.txt*        For Vim version 7.0 or better          version 1.3.0


		VIM REFERENCE for the Fetch plug-in


Jump to lines and columns specified in buffer names	*vim-fetch*

1. Introduction				|vim-fetch-introduction|
2. Usage				|vim-fetch-usage|
3. Position specifications		|vim-fetch-specs|
4. Troubleshooting			|vim-fetch-troubleshooting|
5. Credits and license			|vim-fetch-credits-license|

{not available when |'compatible'| is set}

==============================================================================
1. Introduction					*vim-fetch-introduction*

vim-fetch enables Vim to process line and column jump specifications in file
paths as found in stack traces and similar output. When asked to open such
a file, Vim with vim-fetch will jump to the specified line (and column, if
given) instead of displaying an empty, new file.

==============================================================================
2. Usage					*vim-fetch-usage*


FROM OUTSIDE VIM:
>
	vim path/to/file.ext:12:3
<
will open `file.ext` and jump to line 12, column 3.

This works for multiple files (|arglist| passing) in any mix of spec'ed and
unspec'ed paths, and with all Vim |windows-opening| switches ('-o', '-O', and
'-p' if compiled with |+windows|)


FROM INSIDE VIM:
>
	:e[dit] path/to/file.ext:100:12
<
will open `file.ext` and jump to line 100, column 12.

This works for any command that opens files with |edit| semantics, including
|argedit|, |pedit| and |diffsplit| on local file systems (e.g. not for |netrw|
remote editing).


INTEGRATION:

1. position buffer local variable		*b:fetch_lastpos*

After processing a spec for a buffer, vim-spec sets a buffer-local variable,
>
	let b:fetch_lastpos = [lnum, colnum]
<
You can use the presence and / or values of that variable to integrate
with vim-fetch.

2. autocommand API				*BufFetchPosPre* *BufFetchPosPost*

vim-fetch triggers two |User| autocommand events when setting the position in
a buffer: `BufFetchPosPre` before and `BufFetchPosPost` after.

Notes:	- BufFetchPosPost is fired if the position fetch function completes, it
	  does not guarantee the final position of the cursor.
	- The events are triggered with |:silent| to avoid flooding message
	  history with "No matching autocommands" messages. Use |:unsilent| to
	  restore normal message processing, i.e.
>
		autocmd User BufFetchPosPre unsilent echomsg 'Gotcha!'
<
==============================================================================
3. Position specifications			*vim-fetch-specs*

vim-fetch understands the following position specifications:


COLON SEPARATED

1. path/to/file.ext:lnum
2. path/to/file.ext:lnum:
3. path/to/file.ext:lnum:colnum
4. path/to/file.ext:lnum:colnum:


PARENTHESES ENCLOSED

5. path/to/file.ext(lnum)
6. path/to/file.ext(lnum:colnum)


PLAN 9 STYLE

7. path/to/file.ext:#lnum

Note: `#` is the alternate file token and needs to be escaped to be used on
the command line (see |cmdline-special|).


OTHER SPEC TYPES

If you would you like to see other specs in vim-fetch, open an issue (or even
better: send a PR) for them at

	https://github.com/kopischke/vim-fetch

==============================================================================
4. Troubleshooting			*vim-fetch-troubleshooting*


I HAVE FILES WITH THE POSITION SPEC IN MY BUFFER (ARG) LIST

vim-fetch uses the |BufWinEnter| event to trigger the loading; if your buffers
have never actually entered a window yet, they are still listed in their
spec'ed form. Correct loading will happen when you select them for editing.


I CAN'T JUMP TO LINE 8

If you use an edit command with a file token like `%` or `#` with a trailing
colon spec and the line number is 8, Vim will parse that as the file name
modifier |%:8|. Escape the first colon or prepend a 0 to the line number to
avoid the issue.


I TRIED TO EDIT A FILE WITH A PLAN 9 STYLE SPEC AND GOT ANOTHER FILE (OR E194)

`#` is the alternate file token; you need to escape it to use it literally:
>
	:e path/to/file.ext:\#lnum
<

I CAN'T JUMP TO LINES IN REMOTE FILES VIA NETRW

This is by design: vim-fetch needs to check for readable files in both spec'ed
and unspec'ed form. Doing that remotely, even when possible, would add too
much latency to file opening.


MY PROBLEM ISN'T LISTED HERE

You might have found a bug. Please open an issue at

	https://github.com/kopischke/vim-fetch/issues

Please do not forget to list the steps to reproduce the issue as well as your
Vim version and platform.

==============================================================================
5. Credits and License			*vim-fetch-credits-license*

vim-fetch is maintained by Martin Kopischke

	http://martin.kopischke.net

and licensed under the terms of the MIT license according to the accompanying
license file (LICENSE.md). It is inspired by, but not based on, the `file_line`
plug-in by Victor Bogado (https://github.com/bogado/file-line).

vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:fdm=marker:
